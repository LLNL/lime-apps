
#include "xil_cache.h" // Xil_D*
#include "xil_cache_l.h" // Xil_L1D*
#include "xl2cc.h" // XPS_L2CC_*
#include "xpseudo_asm_gcc.h" // mtcp
#include "xreg_cortexa9.h" // XREG_CP15_*
#include "xil_io.h" // Xil_Out32

################################################################################

// invalidate view block optimization
// invalidate inside loop
// 3.0338 sec
// For some reason, this is slower with the cache management inside the loop

void page_rank_itr(...
				unsigned view_n = view_sz / sizeof(double);
				mtcp(XREG_CP15_CACHE_SIZE_SEL, 0); /* Select cache L0 D-cache in CSSR */
				for (j = 0; j < (view_n & ~3); j+=4) {
					tmp += block[j];
					tmp += block[j+1];
					tmp += block[j+2];
					tmp += block[j+3];
					mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, &block[j]);
				}
				for (; j < view_n; ++j) {
					tmp += block[j];
				}
				mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (unsigned int)&block[j-1] & 0x1FU);
				mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (unsigned int)&block[j] & 0x1FU);
				mtcp(XREG_CP15_INVAL_DC_LINE_MVA_POC, (unsigned int)&block[j+4] & 0x1FU);
				dsb(); /* Wait for L1 invalidate to complete */

.L42:
	fldd	d19, [r3, #-272]
	pld	[r3]
	fldd	d18, [r3, #-280]
	sub	r1, r3, #280
	fldd	d17, [r3, #-264]
	fldd	d16, [r3, #-256]
	faddd	d18, d19, d18
	faddd	d17, d18, d17
	faddd	d16, d17, d16
	faddd	d8, d8, d16
@ 143 "../src/pager.cpp" 1
	mcr p15, 0, r1,  c7,  c6, 1
@ 0 "" 2
	add	r2, r2, #4
	add	r3, r3, #32
	cmp	r2, r0
	bcc	.L42

################################################################################

// invalidate view block optimization
// invalidate outside loop
// 2.90258 sec

void page_rank_itr(...
				Xil_L1DCacheInvalidateRange((unsigned int)block, view_sz);
				unsigned view_n = view_sz / sizeof(double);
				for (j = 0; j < (view_n & ~3); ++j) {
					tmp += block[j];
				}
				for (; j < view_n; ++j) {
					tmp += block[j];
				}

.L42:
	fldd	d19, [r2, #-192]
	add	r3, r0, #5
	fldd	d16, [r2, #-200]
	cmp	r3, ip
	fldd	d18, [r2, #-184]
	add	r3, r0, #4
	fldd	d17, [r2, #-176]
	pld	[r2]
	mov	r0, r3
	add	r2, r2, #32
	faddd	d16, d19, d16
	faddd	d16, d16, d18
	faddd	d16, d16, d17
	faddd	d8, d8, d16
	bcc	.L42

################################################################################

// flush next page rank vector optimization
// flush inside loop
// with L1 & L2 flush inside loop at scale 19, runtime = 2.9716 sec

void page_rank_itr(...
		next_pr[i] = tmp;
		if ((i&3) == 3) {
			mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, ((unsigned int)&next_pr[i] & (~0x1F)));
			Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_PA_OFFSET, ((unsigned int)&next_pr[i] & (~0x1F)));
		}
	}
	if ((num_vertices&3)) {
		mtcp(XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC, ((unsigned int)&next_pr[num_vertices] & (~0x1F)));
		Xil_Out32(XPS_L2CC_BASEADDR + XPS_L2CC_CACHE_INV_CLN_PA_OFFSET, ((unsigned int)&next_pr[num_vertices] & (~0x1F)));
	}

################################################################################

// flush next page rank vector optimization
// flush outside loop
// with L1 & L2 flush outside loop at scale 19, runtime = 2.92142 sec

void page_rank_itr(...
		next_pr[i] = tmp;
	}
	Xil_DCacheFlushRange((unsigned int)next_pr, num_vertices*sizeof(double));
